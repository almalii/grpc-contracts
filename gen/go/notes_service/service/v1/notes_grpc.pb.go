// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: notes_service/service/v1/notes.proto

package pb_notes_service

import (
	context "context"
	v1 "github.com/almalii/grpc-contracts/gen/go/notes_service/model/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotesService_CreateNote_FullMethodName = "/notes_service.service.v1.NotesService/CreateNote"
	NotesService_GetNote_FullMethodName    = "/notes_service.service.v1.NotesService/GetNote"
	NotesService_GetNotes_FullMethodName   = "/notes_service.service.v1.NotesService/GetNotes"
	NotesService_UpdateNote_FullMethodName = "/notes_service.service.v1.NotesService/UpdateNote"
	NotesService_DeleteNote_FullMethodName = "/notes_service.service.v1.NotesService/DeleteNote"
)

// NotesServiceClient is the client API for NotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotesServiceClient interface {
	CreateNote(ctx context.Context, in *v1.CreateNoteRequest, opts ...grpc.CallOption) (*v1.NoteIDResponse, error)
	GetNote(ctx context.Context, in *v1.NoteIDRequest, opts ...grpc.CallOption) (*v1.GetNoteResponse, error)
	GetNotes(ctx context.Context, in *v1.AuthorIDRequest, opts ...grpc.CallOption) (*v1.NoteResponseList, error)
	UpdateNote(ctx context.Context, in *v1.UpdateNoteRequest, opts ...grpc.CallOption) (*v1.UpdateNoteResponse, error)
	DeleteNote(ctx context.Context, in *v1.NoteIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotesServiceClient(cc grpc.ClientConnInterface) NotesServiceClient {
	return &notesServiceClient{cc}
}

func (c *notesServiceClient) CreateNote(ctx context.Context, in *v1.CreateNoteRequest, opts ...grpc.CallOption) (*v1.NoteIDResponse, error) {
	out := new(v1.NoteIDResponse)
	err := c.cc.Invoke(ctx, NotesService_CreateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) GetNote(ctx context.Context, in *v1.NoteIDRequest, opts ...grpc.CallOption) (*v1.GetNoteResponse, error) {
	out := new(v1.GetNoteResponse)
	err := c.cc.Invoke(ctx, NotesService_GetNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) GetNotes(ctx context.Context, in *v1.AuthorIDRequest, opts ...grpc.CallOption) (*v1.NoteResponseList, error) {
	out := new(v1.NoteResponseList)
	err := c.cc.Invoke(ctx, NotesService_GetNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) UpdateNote(ctx context.Context, in *v1.UpdateNoteRequest, opts ...grpc.CallOption) (*v1.UpdateNoteResponse, error) {
	out := new(v1.UpdateNoteResponse)
	err := c.cc.Invoke(ctx, NotesService_UpdateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) DeleteNote(ctx context.Context, in *v1.NoteIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotesService_DeleteNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotesServiceServer is the server API for NotesService service.
// All implementations must embed UnimplementedNotesServiceServer
// for forward compatibility
type NotesServiceServer interface {
	CreateNote(context.Context, *v1.CreateNoteRequest) (*v1.NoteIDResponse, error)
	GetNote(context.Context, *v1.NoteIDRequest) (*v1.GetNoteResponse, error)
	GetNotes(context.Context, *v1.AuthorIDRequest) (*v1.NoteResponseList, error)
	UpdateNote(context.Context, *v1.UpdateNoteRequest) (*v1.UpdateNoteResponse, error)
	DeleteNote(context.Context, *v1.NoteIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNotesServiceServer()
}

// UnimplementedNotesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotesServiceServer struct {
}

func (UnimplementedNotesServiceServer) CreateNote(context.Context, *v1.CreateNoteRequest) (*v1.NoteIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedNotesServiceServer) GetNote(context.Context, *v1.NoteIDRequest) (*v1.GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (UnimplementedNotesServiceServer) GetNotes(context.Context, *v1.AuthorIDRequest) (*v1.NoteResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotes not implemented")
}
func (UnimplementedNotesServiceServer) UpdateNote(context.Context, *v1.UpdateNoteRequest) (*v1.UpdateNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedNotesServiceServer) DeleteNote(context.Context, *v1.NoteIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedNotesServiceServer) mustEmbedUnimplementedNotesServiceServer() {}

// UnsafeNotesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotesServiceServer will
// result in compilation errors.
type UnsafeNotesServiceServer interface {
	mustEmbedUnimplementedNotesServiceServer()
}

func RegisterNotesServiceServer(s grpc.ServiceRegistrar, srv NotesServiceServer) {
	s.RegisterService(&NotesService_ServiceDesc, srv)
}

func _NotesService_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServiceServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotesService_CreateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServiceServer).CreateNote(ctx, req.(*v1.CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotesService_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.NoteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServiceServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotesService_GetNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServiceServer).GetNote(ctx, req.(*v1.NoteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotesService_GetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AuthorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServiceServer).GetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotesService_GetNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServiceServer).GetNotes(ctx, req.(*v1.AuthorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotesService_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServiceServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotesService_UpdateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServiceServer).UpdateNote(ctx, req.(*v1.UpdateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotesService_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.NoteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServiceServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotesService_DeleteNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServiceServer).DeleteNote(ctx, req.(*v1.NoteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotesService_ServiceDesc is the grpc.ServiceDesc for NotesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notes_service.service.v1.NotesService",
	HandlerType: (*NotesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNote",
			Handler:    _NotesService_CreateNote_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _NotesService_GetNote_Handler,
		},
		{
			MethodName: "GetNotes",
			Handler:    _NotesService_GetNotes_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _NotesService_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _NotesService_DeleteNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notes_service/service/v1/notes.proto",
}
